AWSTemplateFormatVersion: '2010-09-09'
Description: CodePipeline to build and deploy the lambda-basic Lambda stack via CloudFormation (GitHub source)

Parameters:
  GitHubConnectionArn:
    Type: String
    Default: arn:aws:codeconnections:us-east-1:132502993358:connection/f96d1b39-bc0d-4bf7-b91d-23a27743d935
    Description: ARN of an existing CodeStar Connection to GitHub (create in Developer Tools > Connections)
  FullRepositoryId:
    Type: String
    Default: sampathkmanchala/lambda-layers-v2
    Description: GitHub owner/repo (e.g., your-org/your-repo)
  BranchName:
    Type: String
    Default: main
    Description: Branch to build from
  LambdaStackName:
    Type: String
    Default: lambda-basic-stack
    Description: Name of the Lambda CloudFormation stack to create/update
  LambdaTemplatePath:
    Type: String
    Default: lambda-basic.yml
    Description: Path (in repo) to the Lambda CFN template that creates the function
  BuildComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
    AllowedValues: [BUILD_GENERAL1_SMALL, BUILD_GENERAL1_MEDIUM, BUILD_GENERAL1_LARGE]
    Description: CodeBuild compute size

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration: { Status: Enabled }
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CodeBuildS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [s3:GetObject, s3:PutObject, s3:ListBucket]
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub '${ArtifactBucket.Arn}/*'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts: { Type: CODEPIPELINE }
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref BuildComputeType
        Image: aws/codebuild/standard:7.0
        EnvironmentVariables:
          - Name: ARTIFACT_BUCKET
            Type: PLAINTEXT
            Value: !Ref ArtifactBucket
      Source: { Type: CODEPIPELINE }
      TimeoutInMinutes: 30
      Cache: { Type: NO_CACHE }
      BuildSpec: |
        version: 0.2
        phases:
          build:
            commands:
              - pip3 install -r ./src/requires.txt --quiet --target .
              - echo "Zipping Lambda code from ./src"
              - mkdir -p dist
              - cd src
              - zip -r ../dist/function.zip .
              - cd ..
              - |
                CODE_KEY=lambda/${CODEBUILD_RESOLVED_SOURCE_VERSION:-latest}.zip
                echo "Uploading to s3://${ARTIFACT_BUCKET}/${CODE_KEY}"
                aws s3 cp dist/function.zip s3://${ARTIFACT_BUCKET}/${CODE_KEY}
              - |
                printf '{"Parameters":{"CodeS3Bucket":"%s","CodeS3Key":"%s"}}' "$ARTIFACT_BUCKET" "$CODE_KEY" > cfn-params.json
        artifacts:
          files:
            - cfn-params.json
          discard-paths: yes

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [s3:GetObject, s3:PutObject, s3:ListBucket]
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub '${ArtifactBucket.Arn}/*'
              - Effect: Allow
                Action: [codebuild:StartBuild, codebuild:BatchGetBuilds]
                Resource: !GetAtt CodeBuildProject.Arn
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:Describe*
                  - cloudformation:GetTemplate
                Resource: '*'
              - Effect: Allow
                Action: codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref FullRepositoryId     # e.g., your-org/your-repo
                BranchName: !Ref BranchName
                DetectChanges: true
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildZip
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        - Name: Deploy
          Actions:
            - Name: CFNDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref LambdaStackName
                TemplatePath: !Sub 'SourceArtifact::${LambdaTemplatePath}'
                TemplateConfiguration: 'BuildArtifact::cfn-params.json'
                Capabilities: CAPABILITY_IAM
              InputArtifacts:
                - Name: SourceArtifact
                - Name: BuildArtifact

Outputs:
  PipelineName:
    Value: !Ref Pipeline
    Description: CodePipeline name
  ArtifactBucketName:
    Value: !Ref ArtifactBucket
    Description: S3 bucket used for artifacts and Lambda ZIPs
